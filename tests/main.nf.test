nextflow_pipeline {

    name "Full Pipeline NF-Tests for LegioVUE"
    script "main.nf"

    //--- Test 1
    test("Conflicting Input Data Sources Specified") {
        tag "fail"

        when {
            params {
                input = "$baseDir/tests/test_data/input_none.csv"
                fastq_dir = "$baseDir/tests/test_data/"
                outdir = "results"
            }
        }
        then {
            // Status
            assert workflow.failed

            // Message
            assert workflow.stdout.contains("ERROR ~ Please provide input data with either: '--input input.csv' or '--fastq_dir <PATH/TO/PAIRED_FASTQS>' but not both")
        }
    }

    //--- Test 2
    test("No Input Data Sources Specified") {
        tag "fail"

        when {
            params {
                outdir = "results"
            }
        }
        then {
            // Status
            assert workflow.failed

            // Message
            assert workflow.stdout.contains("ERROR ~ Please provide input data with either: '--input input.csv' or '--fastq_dir <PATH/TO/PAIRED_FASTQS>'")
        }
    }

    //--- Test 3
    test("Missing Input Fastq Test") {
        tag "fail"

        when {
            params {
                input = "$baseDir/tests/test_data/input.csv"
                outdir = "results"
                min_reads = 100
            }
        }
        then {
            // Status
            assert workflow.failed

            // Message
            assert workflow.stdout.contains("ERROR ~ Validation of pipeline parameters failed!")
        }
    }

    //--- Test 4
    test("Stub Run Test") {
        tag "success"
        options "-stub-run"

        when {
            params {
                fastq_dir = "$baseDir/tests/test_data/"
                outdir = "results"
                min_reads = 0
                kraken2_db = "./"
            }
        }
        then {
            // Status
            assert workflow.success

            // Channels and Files
            assert path("$launchDir/results").exists()
            assert workflow.trace.failed().size() == 0
        }
    }
}
